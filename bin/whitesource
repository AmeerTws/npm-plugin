#!/usr/bin/env node "use strict";process.title="whitesource";var shell=require("shelljs/global"),cli=require("cli"),fs=require("fs"),traverse=require("traverse"),prompt=require("prompt");prompt.message="whitesource",prompt.delimiter=">".green;var http=require("http"),https=require("https"),querystring=require("querystring"),baseURL="saas.whitesourcesoftware.com",runtime=(new Date).valueOf(),foundedShasum=0,missingShasum=0,confJson={},checkPolEnabled=!1,checkPolSent=!1,mapShortToLong={dependencies:"children",resolved:"artifactId"},buildCallback=function(a){var b=(new Date).valueOf()-runtime;b/=1e3;var c=function(){cli.ok("Build success! ( took: "+b+"s ) "),process.exit(0)};if(checkPolSent||fs.writeFile("whitesource.response.json",JSON.stringify(a,null,4),function(a){a&&cli.error(a)}),cli.ok("Running callback"),checkPolEnabled){console.log(a);var d=a.existingProjects,e=a.newProjects,f=!1,g=[],h=[];if(d)for(key in d)for(var i=d[key].children,j=0;j<i.length;j++)i[j].policy&&(g.push(i[j]),f=!0);if(e)for(key in e)for(var i=e[key].children,j=0;j<i.length;j++)h.push(i[j]),i[j].policy&&(g.push(i[j]),f=!0);if(0!=g.length){cli.error("Policy violations found exiting build"),cli.info("See list of violations:");for(var j=0;j<g.length;j++)cli.info(g[j].resource.displayName+" : "+g[j].policy.displayName)}else cli.ok("No policy violations found"),checkPolSent?c():(checkPolSent=!0,postJson())}c()},refit_keys=function(a){var b,c,d,e;b={};for(c in a)if(d=mapShortToLong[c]||c,e=a[c],"object"==typeof e&&(e=refit_keys(e)),b[d]=e,"children"===d){b[d]=[];for(var f in e)b[d].push(e[f]),e[f].name=f,e[f].groupId=f,e[f].systemPath=null,e[f].scope=null,e[f].exclusions=[],e[f].classifier=null}return b},postJson=function(){cli.ok("Getting ready to post report to WhiteSource...");var a=JSON.parse(fs.readFileSync("./whitesource.report.json","utf8")),b=refit_keys(a);try{var c=JSON.parse(fs.readFileSync("./package.json","utf8"))}catch(d){return cli.error("Problem reading Package.json, please check the file is a valid JSON"),!1}if(!c.name||!c.version)return cli.error("Node module -Name- and -Version- must be specified in module Package.json file"),!1;var e=!0;"undefined"!=typeof confJson.https&&(e=confJson.https);var f,g=confJson.baseURL?confJson.baseURL:baseURL,h=confJson.port?confJson.port:"443",i=confJson.productName?confJson.productName:c.name,j=confJson.productVersion?confJson.productVersion:c.version,k=confJson.productToken?confJson.productToken:"",l=confJson.projectName?confJson.projectName:c.name,m=confJson.projectVer?confJson.projectVer:c.version,n=confJson.projectToken?confJson.projectToken:"",o=(new Date).valueOf();if(!confJson.apiKey)return cli.error("Cant find API Key, please make sure you input your whitesource API token in the whitesource.config file."),!1;if(n&&k)return cli.error("Cant use both project Token & product Token please select use only one token,to fix this open the whitesource.config file and remove one of the tokens."),!1;var p=[{dependencies:b.children,coordinates:{artifactId:c.name,version:c.version}}],q=c.checkPolicies?c.checkPolicies:!0,r=q&&!checkPolSent?"CHECK_POLICIES":"UPDATE";checkPolEnabled||(r="UPDATE");var s={type:r,agent:"npm-plugin",agentVersion:"1.0",product:i,productVer:j,projectName:l,projectVer:m,token:confJson.apiKey,timeStamp:o,diff:JSON.stringify(p)};n?s.projectToken=n:k&&(s.productToken=k);var t=querystring.stringify(s);cli.ok("Posting to "+g+":"+h);var u={host:g,port:h,path:"/agent",method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"}},v=function(a){var b=[];a.on("data",function(a){b+=a}),a.on("end",function(){var a=JSON.parse(b);1==a.status?buildCallback(a):(cli.error(JSON.stringify(a)),process.exit(1))})};f=http.request(u,v),e&&(cli.info("Using HTTPS"),u.headers={"Content-Type":"application/x-www-form-urlencoded","Content-Length":t.length},f=https.request(u,v)),f.write(t),f.end()},traverseJson=function(callback){cli.ok("Building dependencies report");for(var shrinkwrap=JSON.parse(fs.readFileSync("./npm-shrinkwrap.json","utf8")),parseData=shrinkwrap,scrubbed=traverse(parseData).paths(),i=0;i<scrubbed.length;i++)for(var path=scrubbed[i],j=0;j<path.length;j++){var isDep="dependencies"===path[j],isVer="version"===path[j],isResolved="resolved"===path[j],isFrom="from"===path[j],isName="name"===path[j],isShasum="shasum"===path[j]||"_shasum"===path[j],isNodeMod="node_modules"===path[j];if(isDep&&(path[j]="node_modules",isNodeMod=!0),!(path[j]!==path[path.length-1]||isName||isNodeMod||isFrom||isResolved||isVer||isShasum)){for(var pointerStrng=scrubbed[i].join(".").replace(/node_modules/gi,"dependencies"),uri=scrubbed[i].join("/")+"/package.json",strArr=uri.split(""),k=0;k<strArr.length;k++)"/"==strArr[k]&&(strArr[k]='"]["');var joinedStr=strArr.join("");joinedStr=joinedStr.substr(0,joinedStr.lastIndexOf("["));var objPointer='parseData["'+joinedStr.replace(/node_modules/gi,"dependencies"),dataObjPointer=eval(objPointer),obj=JSON.parse(fs.readFileSync(uri,"utf8"));obj.dist||obj._shasum?(obj.dist&&(dataObjPointer.shasum=obj.dist.shasum,path.shasum=obj.dist.shasum),obj._shasum&&(dataObjPointer.sha1=obj._shasum,path.sha1=obj._shasum),foundedShasum++):(missingShasum++,cli.info("Missing : "+obj.name))}}cli.info("Total shasum found: "+foundedShasum),cli.info("Missing shasum: "+missingShasum),cli.info("Total project dependencies: "+(missingShasum+foundedShasum)),cli.ok("Saving dependencies report"),fs.writeFile("whitesource.report.json",JSON.stringify(parseData,null,4),function(a){a?cli.error(a):callback()})};cli.parse(null,["test","config","run"]),cli.main(function(){try{var a="Please create a whitesource.config.json to continue",b="whitesource.config.json is not a valid JSON file";confJson=fs.readFileSync("./whitesource.config.json","utf8",function(a){return a?void 0:(cli.error(b),!1)}),confJson=JSON.parse(confJson)}catch(c){return cli.error(a),!1}if("run"===cli.command){try{JSON.parse(fs.readFileSync("./whitesource.report.json","utf8"))}catch(c){cli.ok("Running whitesource for the first time")}cli.ok("Running whitesource..."),exec("npm shrinkwrap"),cli.ok("Done shrinkwrapping!"),traverseJson(postJson)}"test"===cli.command,"config"===cli.command});